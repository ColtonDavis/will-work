name: Patch IPA with Frida (robust + diagnostic)

on:
  workflow_dispatch:

jobs:
  patch:
    runs-on: macos-latest
    timeout-minutes: 50

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Prepare workspace
        run: |
          rm -rf work work_unzip || true
          mkdir -p work work_unzip

      - name: Download IPA and dylib (from Releases)
        run: |
          cd work
          # ----- YOUR RELEASE ASSET LINKS -----
          curl -L -o crssplay_frida_localpatched.ipa "https://github.com/ColtonDavis/will-work/releases/download/1/crssplay_frida_localpatched.ipa"
          curl -L -o frida-gadget-17.3.2-ios-universal.dylib "https://github.com/ColtonDavis/will-work/releases/download/1/frida-gadget-17.3.2-ios-universal.dylib"
          echo "Downloaded files in work/:"
          ls -lh

      - name: Quick verify first bytes of IPA
        run: |
          cd work
          echo "First 16 bytes (hex):"
          hexdump -C -n 16 crssplay_frida_localpatched.ipa || true
          HEADER=$(xxd -p -l 4 crssplay_frida_localpatched.ipa || true)
          echo "Header hex: $HEADER"
          if [ "$HEADER" != "504b0304" ]; then
            echo "ERROR: IPA header is not PK.. (504b0304). This likely means the downloaded file is not a real IPA (maybe an HTML page or wrong URL). Aborting."
            exit 2
          fi

      - name: Extract IPA (robust + diagnostics)
        run: |
          cd work
          rm -rf work_unzip || true
          mkdir -p work_unzip
          echo "Attempting extraction with ditto (macOS tolerant)..."
          if ditto -x -k crssplay_frida_localpatched.ipa work_unzip; then
            echo "ditto extraction succeeded."
          else
            echo "ditto extraction failed or returned non-zero; showing unzip listing for diagnostics and attempting unzip fallback..."
            unzip -l crssplay_frida_localpatched.ipa | sed -n '1,120p' || true
            unzip -o crssplay_frida_localpatched.ipa -d work_unzip || true
          fi

          echo
          echo "=== top-level work_unzip listing ==="
          ls -la work_unzip || true
          echo
          echo "=== directory tree (depth=4) under work_unzip ==="
          find work_unzip -maxdepth 4 -ls || true
          echo

          PAYLOAD_DIR=$(find work_unzip -type d -name "Payload" -print -quit || true)
          if [ -z "$PAYLOAD_DIR" ]; then
            echo "ERROR: Payload folder not found under work_unzip. Extraction failed or archive structure unexpected."
            echo "Dumping full work_unzip listing for debug:"
            find work_unzip -maxdepth 10 -ls || true
            exit 3
          fi
          echo "Payload detected at: $PAYLOAD_DIR"
          ls -la "$PAYLOAD_DIR" || true

      - name: Copy Frida dylib into .app and inject into dfxm (optool)
        run: |
          set -euo pipefail
          # compute payload dir and app path
          PAYLOAD_DIR=$(find work_unzip -type d -name "Payload" -print -quit)
          if [ -z "$PAYLOAD_DIR" ]; then
            echo "ERROR: Payload not found; aborting."
            exit 1
          fi
          echo "Using Payload: $PAYLOAD_DIR"

          APP_PATH=$(find "$PAYLOAD_DIR" -type d -name "*.app" -print -quit || true)
          if [ -z "$APP_PATH" ]; then
            echo "ERROR: no .app bundle found under Payload"
            find "$PAYLOAD_DIR" -maxdepth 3 -ls || true
            exit 1
          fi
          echo "App bundle found: $APP_PATH"

          # use the known main executable name dfxm (fallback to CFBundleExecutable if not present)
          EXE_PATH="$APP_PATH/dfxm"
          if [ ! -f "$EXE_PATH" ]; then
            echo "dfxm not found at $EXE_PATH; listing app contents:"
            ls -la "$APP_PATH" || true
            if [ -f "$APP_PATH/Info.plist" ]; then
              execname=$(defaults read "$APP_PATH/Info.plist" CFBundleExecutable 2>/dev/null || true)
              if [ -n "$execname" ]; then
                EXE_PATH="$APP_PATH/$execname"
                echo "Falling back to CFBundleExecutable: $EXE_PATH"
              fi
            fi
            if [ ! -f "$EXE_PATH" ]; then
              echo "ERROR: main executable not found in app bundle. Aborting."
              exit 1
            fi
          fi
          echo "Target executable: $EXE_PATH"
          ls -lh "$EXE_PATH" || true

          # copy frida gadget into Frameworks
          mkdir -p "$APP_PATH/Frameworks"
          if [ -f work/frida-gadget-17.3.2-ios-universal.dylib ]; then
            cp work/frida-gadget-17.3.2-ios-universal.dylib "$APP_PATH/Frameworks/"
          else
            echo "ERROR: frida dylib not found in work/ - listing work/:"
            ls -la work || true
            exit 1
          fi
          chmod 755 "$APP_PATH/Frameworks/frida-gadget-17.3.2-ios-universal.dylib"
          echo "Frameworks contents:"
          ls -la "$APP_PATH/Frameworks" || true

          # ensure optool is available (try prebuilt then build)
          if ! command -v optool >/dev/null 2>&1; then
            echo "optool not found — trying prebuilt package..."
            OPTZIP="https://github.com/alexzielenski/optool/releases/download/0.1/optool.zip"
            if curl -sSL "$OPTZIP" -o /tmp/optool.zip; then
              unzip -o /tmp/optool.zip -d /tmp/optool_tmp || true
              if [ -f /tmp/optool_tmp/optool ]; then
                sudo mv /tmp/optool_tmp/optool /usr/local/bin/optool
                sudo chmod +x /usr/local/bin/optool
              fi
            fi
          fi
          if ! command -v optool >/dev/null 2>&1; then
            echo "Prebuilt optool not available — building from source..."
            git clone https://github.com/alexzielenski/optool.git /tmp/optool_src
            cd /tmp/optool_src
            make || true
            if [ -f optool ]; then
              sudo mv optool /usr/local/bin/optool
              sudo chmod +x /usr/local/bin/optool
            else
              echo "ERROR: optool build failed. Aborting."
              ls -la || true
              exit 1
            fi
            cd -
          fi
          echo "optool ready: $(which optool || true)"

          # do the injection
          echo "Running optool to install LC_LOAD_DYLIB..."
          sudo /usr/local/bin/optool install -c load -p "@executable_path/Frameworks/frida-gadget-17.3.2-ios-universal.dylib" -t "$EXE_PATH" || { echo "optool failed"; exit 1; }
          echo "optool injection completed."

          # verification: prefer otool -L then fallback to strings
          VERFILE="$(pwd)/../../otool_verification.txt"
          echo "Writing verification output to $VERFILE"
          if command -v otool >/dev/null 2>&1; then
            otool -L "$EXE_PATH" > "$VERFILE" 2>&1 || true
          else
            strings "$EXE_PATH" > "$VERFILE" 2>&1 || true
          fi
          echo "Verification file contents:"
          sed -n '1,200p' "$VERFILE" || true

      - name: Upload otool verification artifact
        uses: actions/upload-artifact@v4
        with:
          name: otool_verification
          path: work_unzip/otool_verification.txt

      - name: Repack patched IPA
        run: |
          cd work_unzip
          zip -r ../crssplay_frida_patched.ipa Payload
          cd ..
          echo "Patched IPA:"
          ls -lh crssplay_frida_patched.ipa || true

      - name: Upload patched IPA artifact
        uses: actions/upload-artifact@v4
        with:
          name: crssplay_frida_patched
          path: work/crssplay_frida_patched.ipa
