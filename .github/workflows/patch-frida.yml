name: Patch IPA with Frida

on:
  workflow_dispatch:

jobs:
  patch:
    runs-on: macos-latest
    timeout-minutes: 40

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Prepare workspace
        run: |
          # clean workspace directories we use
          rm -rf work work_unzip || true
          mkdir -p work work_unzip

      - name: Download IPA and dylib (from Releases)
        run: |
          cd work
          # ==== REPLACE THESE URLS IF YOU CHANGE THE RELEASE ASSETS ====
          curl -L -o crssplay_frida_localpatched.ipa "https://github.com/ColtonDavis/will-work/releases/download/1/crssplay_frida_localpatched.ipa"
          curl -L -o frida-gadget-17.3.2-ios-universal.dylib "https://github.com/ColtonDavis/will-work/releases/download/1/frida-gadget-17.3.2-ios-universal.dylib"
          echo "Downloaded files (work directory):"
          ls -lh

      - name: Quick verify first bytes of IPA
        run: |
          cd work
          echo "IPA head (hex):"
          # print first 16 bytes in hex
          hexdump -C -n 16 crssplay_frida_localpatched.ipa || true
          # quick check for PK.. header
          header=$(xxd -p -l 4 crssplay_frida_localpatched.ipa || true)
          echo "First 4 bytes (hex): $header"
          if [ "$header" != "504b0304" ]; then
            echo "ERROR: IPA does not have ZIP header (504b0304). It may be an HTML page or wrong file. Aborting." 
            exit 2
          fi

      - name: Extract IPA (robust + diagnostics)
        run: |
          cd work
          rm -rf work_unzip || true
          mkdir -p work_unzip
          echo "Attempting extraction with ditto (macOS-friendly)..."
          if ditto -x -k crssplay_frida_localpatched.ipa work_unzip; then
            echo "ditto extraction succeeded."
          else
            echo "ditto extraction failed or returned non-zero; showing unzip listing for diagnostics and trying unzip fallback..."
            unzip -l crssplay_frida_localpatched.ipa | head -n 100 || true
            unzip -o crssplay_frida_localpatched.ipa -d work_unzip || true
          fi

          echo
          echo "=== top-level of work_unzip ==="
          ls -la work_unzip || true
          echo
          echo "=== showing first 200 entries of unzip -l output (if any) ==="
          unzip -l crssplay_frida_localpatched.ipa | sed -n '1,200p' || true
          echo
          echo "=== directory tree (depth=3) under work_unzip ==="
          find work_unzip -maxdepth 3 -ls || true
          echo
          if [ ! -d work_unzip/Payload ]; then
            echo "ERROR: Payload directory not present under work_unzip. Extraction failed or archive structure unexpected."
            echo "Dumping full listing for debug:"
            find work_unzip -maxdepth 10 -ls || true
            exit 3
          fi
          echo "Payload found. Listing Payload top-level:"
          ls -la work_unzip/Payload || true

      - name: Copy Frida dylib into app & inject into dfxm (safe & diagnostic)
        run: |
          set -euo pipefail
          # operate from repo root; downloaded files are in work/
          # move into extracted payload area
          cd work_unzip/Payload

          echo "Detecting .app folder inside Payload..."
          APP_REL_PATH=$(find . -type d -name "*.app" -print -quit || true)
          if [ -z "$APP_REL_PATH" ]; then
            echo "ERROR: no .app found under Payload. Aborting."
            find . -maxdepth 3 -ls
            exit 1
          fi

          # normalize and create absolute path
          APP_REL_PATH="${APP_REL_PATH#./}"
          APP_PATH="$(pwd)/${APP_REL_PATH}"
          echo "Found app: $APP_PATH"

          # set path to executable (you said it's called 'dfxm')
          EXE_PATH="$APP_PATH/dfxm"
          if [ ! -f "$EXE_PATH" ]; then
            echo "WARNING: Expected executable dfxm not at $EXE_PATH"
            echo "Listing app contents:"
            ls -la "$APP_PATH" || true
            # try to read CFBundleExecutable fallback
            if [ -f "$APP_PATH/Info.plist" ]; then
              execname=$(defaults read "$APP_PATH/Info.plist" CFBundleExecutable 2>/dev/null || true)
              if [ -n "$execname" ]; then
                EXE_PATH="$APP_PATH/$execname"
                echo "Using CFBundleExecutable fallback: $EXE_PATH"
              fi
            fi
            if [ ! -f "$EXE_PATH" ]; then
              echo "ERROR: executable not found in app bundle. Aborting."
              exit 1
            fi
          fi
          echo "Target executable resolved: $EXE_PATH"
          echo "Executable file info:"
          ls -lh "$EXE_PATH" || true

          # copy frida dylib into app Frameworks
          mkdir -p "$APP_PATH/Frameworks"
          if [ -f ../../frida-gadget-17.3.2-ios-universal.dylib ]; then
            cp ../../frida-gadget-17.3.2-ios-universal.dylib "$APP_PATH/Frameworks/"
          else
            echo "ERROR: frida dylib not present in expected location 'work/frida-gadget-17.3.2-ios-universal.dylib'"
            ls -la ../../ || true
            exit 1
          fi
          chmod 755 "$APP_PATH/Frameworks/frida-gadget-17.3.2-ios-universal.dylib"
          echo "Frameworks contents:"
          ls -la "$APP_PATH/Frameworks" || true

          # ensure optool exists - try download prebuilt; else build
          if ! command -v optool >/dev/null 2>&1; then
            echo "optool not found — trying prebuilt download..."
            OPTZIP="https://github.com/alexzielenski/optool/releases/download/0.1/optool.zip"
            if curl -sSL "$OPTZIP" -o /tmp/optool.zip; then
              unzip -o /tmp/optool.zip -d /tmp/optool_tmp || true
              if [ -f /tmp/optool_tmp/optool ]; then
                sudo mv /tmp/optool_tmp/optool /usr/local/bin/optool
                sudo chmod +x /usr/local/bin/optool
              fi
            fi
          fi

          if ! command -v optool >/dev/null 2>&1; then
            echo "Prebuilt optool not available — attempting build from source..."
            git clone https://github.com/alexzielenski/optool.git /tmp/optool_src
            cd /tmp/optool_src
            make || true
            if [ -f optool ]; then
              sudo mv optool /usr/local/bin/optool
              sudo chmod +x /usr/local/bin/optool
            else
              echo "ERROR: optool build failed. Aborting."
              ls -la || true
              exit 1
            fi
            cd -
          fi
          echo "optool is present at: $(command -v optool || true)"

          # inject LC_LOAD_DYLIB
          echo "Running optool to inject LC_LOAD_DYLIB for frida gadget..."
          sudo /usr/local/bin/optool install -c load -p "@executable_path/Frameworks/frida-gadget-17.3.2-ios-universal.dylib" -t "$EXE_PATH" || { echo "optool injection failed"; exit 1; }

          echo "Injection attempt done. Verifying binary for frida load entry..."
          if command -v otool >/dev/null 2>&1; then
            otool -L "$EXE_PATH" | grep -i frida || echo "No frida load entry shown by otool"
          else
            echo "otool not present; using strings fallback to search for frida:"
            strings "$EXE_PATH" | grep -i frida || echo "No frida string found in binary"
          fi

          echo "Copy + inject step completed."

      - name: Repack IPA
        run: |
          cd work_unzip
          zip -r ../crssplay_frida_patched.ipa Payload
          cd ..
          echo "Patched IPA repacked:"
          ls -lh crssplay_frida_patched.ipa || true

      - name: Upload patched IPA artifact
        uses: actions/upload-artifact@v4
        with:
          name: crssplay_frida_patched
          path: work/crssplay_frida_patched.ipa
